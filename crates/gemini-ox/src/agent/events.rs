use serde::Serialize;
use thiserror::Error;

use crate::generate_content::{response::GenerateContentResponse, usage::UsageMetadata};

use super::error::AgentError;

/// Event variants emitted during agent execution
#[derive(Debug, Serialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum AgentEvent {
    /// Emitted once at the beginning of the agent's execution
    AgentStart,

    /// A chunk of text generated by the language model
    AgentResponse { response: GenerateContentResponse },

    /// Emitted when the final LLM turn finishes, includes usage stats if available
    StreamEnd { usage: Option<UsageMetadata> },

    /// Emitted once when the agent successfully completes its task
    AgentFinish,

    /// Emitted when an error occurs during agent execution. The stream terminates after this.
    AgentError { error: String },
}
