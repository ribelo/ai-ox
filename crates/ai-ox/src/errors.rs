use thiserror::Error;

/// Represents the possible errors that can occur when interacting with a model.
#[derive(Error, Debug)]
pub enum GenerateContentError {
    /// An error originating from the underlying model client (e.g., `gemini-ox`).
    #[error("Underlying client error: {0}")]
    ClientError(#[from] gemini_ox::GeminiRequestError),

    /// An error related to invalid configuration.
    #[error("Invalid configuration: {0}")]
    Configuration(String),

    /// An error that occurs when converting messages between the `ai-ox` format
    /// and the provider-specific format.
    #[error("Message conversion error: {0}")]
    MessageConversion(String),

    /// An error that occurs when the model's response cannot be parsed correctly.
    #[error("Failed to parse model response: {0}")]
    ResponseParsing(String),

    /// An error indicating that the model did not generate any response content.
    #[error("No response was generated by the model")]
    NoResponse,

    /// An error indicating that a requested feature is not supported by this model.
    #[error("Unsupported feature: {0}")]
    UnsupportedFeature(String),
}

impl GenerateContentError {
    /// Creates a new configuration error.
    pub fn configuration(message: impl Into<String>) -> Self {
        Self::Configuration(message.into())
    }

    /// Creates a new message conversion error.
    pub fn message_conversion(message: impl Into<String>) -> Self {
        Self::MessageConversion(message.into())
    }

    /// Creates a new response parsing error.
    pub fn response_parsing(message: impl Into<String>) -> Self {
        Self::ResponseParsing(message.into())
    }

    /// Creates a new unsupported feature error.
    pub fn unsupported_feature(feature: impl Into<String>) -> Self {
        Self::UnsupportedFeature(feature.into())
    }
}
