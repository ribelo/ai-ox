//! Defines the events and deltas used for streaming model responses.

use crate::usage::Usage;
use serde::{Deserialize, Serialize};

use super::message::MessageRole as Role;
use crate::tool::ToolUse;

/// The reason the model stopped generating content.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum FinishReason {
    /// The model decided to stop generating content, typically because it reached a
    /// natural end or a provided stop sequence.
    Stop,
    /// The model generated a call to a tool.
    ToolCalls,
    /// The generation was stopped because the output length exceeded the `max_output_tokens` limit.
    Length,
    /// The generation was stopped due to content filtering or safety ratings.
    ContentFilter,
    /// The reason for stopping is not specified or belongs to a category not covered here.
    Other,
}

/// Represents a chunk of a tool call as part of a streaming response.
///
/// A complete tool call is constructed by accumulating these chunks.
#[derive(Debug, Clone, PartialEq, Default, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct ToolCallChunk {
    /// The index of the tool call in the message's final list of tool calls.
    pub index: usize,
    /// The unique ID for the tool call. This is generated by the model and is used to
    /// correlate a `ToolResult` back to the model.
    /// This is sent once per tool call, in the first chunk for that call.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the function to be called.
    /// This is sent once per tool call, in the first chunk for that call.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A delta of the JSON arguments for the function.
    /// The complete arguments string is formed by concatenating the `args_delta` from all
    /// chunks for a given tool call.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args_delta: Option<String>,
}

/// Represents a delta in a message being streamed from a model.
#[derive(Debug, Clone, PartialEq, Default, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct MessageDelta {
    /// The role of the message's author.
    /// This is typically sent once at the beginning of a stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,

    /// A delta of the text content of the message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_delta: Option<String>,

    /// A list of tool call chunks.
    /// In a single stream event, this list may contain deltas for one or more tool calls,
    /// distinguished by their `index`.
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tool_call_chunks: Vec<ToolCallChunk>,
}

/// Represents the final event in a stream when the model stops generating content.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct StreamStop {
    /// The reason the model stopped generating content.
    pub finish_reason: FinishReason,
    /// Token usage statistics for the entire request.
    pub usage: Usage,
}

/// An event in a model's response stream.
///
/// A stream consists of a series of these events.
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "snake_case")]
pub enum StreamEvent {
    /// A delta in the message being generated.
    MessageDelta(MessageDelta),
    /// A delta in text content.
    TextDelta(String),
    /// A complete tool call.
    ToolCall(ToolUse),
    /// A complete tool result.
    ToolResult(crate::content::Part),
    /// Usage information.
    Usage(Usage),
    /// The stream has completed. This is the terminal event.
    StreamStop(StreamStop),
}