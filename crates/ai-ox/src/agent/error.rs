use thiserror::Error;

use crate::{errors::GenerateContentError, tool::ToolError};

/// Represents errors that can occur during agent execution.
#[derive(Debug, Error)]
pub enum AgentError {
    /// An error originating from content generation (model API calls).
    #[error("API error during content generation: {0}")]
    Api(#[from] GenerateContentError),

    /// An error that occurs during tool function execution.
    #[error("Tool execution error: {0}")]
    Tool(#[from] ToolError),

    /// Agent reached the maximum number of iterations without a conclusive response.
    #[error("Agent reached maximum iterations ({limit}) without a conclusive response")]
    MaxIterationsReached { limit: u32 },

    /// Failed to parse the model's response into the expected structured type.
    #[error(
        "Failed to parse response into expected type: {source}. Response text: \"{response_text}\""
    )]
    ResponseParsingFailed {
        #[source]
        source: serde_json::Error,
        response_text: String,
    },

    /// Schema generation failed for structured output.
    #[error("Schema generation failed: {0}")]
    SchemaGenerationFailed(String),

    /// No response content was generated by the model.
    #[error("No response content generated")]
    NoResponse,

    /// Invalid configuration provided to the agent.
    #[error("Invalid configuration: {0}")]
    Configuration(String),

    /// Method not yet implemented.
    #[error("Method not yet implemented")]
    NotImplemented,
}

impl AgentError {
    /// Creates a new configuration error.
    pub fn configuration(message: impl Into<String>) -> Self {
        Self::Configuration(message.into())
    }

    /// Creates a new schema generation error.
    pub fn schema_generation_failed(message: impl Into<String>) -> Self {
        Self::SchemaGenerationFailed(message.into())
    }

    /// Creates a new response parsing error.
    pub fn response_parsing_failed(
        source: serde_json::Error,
        response_text: impl Into<String>,
    ) -> Self {
        Self::ResponseParsingFailed {
            source,
            response_text: response_text.into(),
        }
    }

    /// Creates a new max iterations reached error.
    pub fn max_iterations_reached(limit: u32) -> Self {
        Self::MaxIterationsReached { limit }
    }
}
